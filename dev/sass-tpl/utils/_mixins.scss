@mixin css3($property, $value) {
  @each $prefix in ('', -moz-, -ms-, -o-, -webkit-) {
    #{$prefix}#{$property}: $value;
  }
}
@mixin breakpoint($point) {
   @if $point == large{
    @media (min-width: 64.375em) {
       @content;
    }
  }
  @else if $point == medium {
     @media (min-width: 50em){
      @content;
    }
  }
  @else if $point == small {
     @media (min-width: 37.5em){
      @content;
    }
  }
}
@mixin image-2x($image, $width, $height) {
   @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx){
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}
@mixin clearfix() {
  &:after,
  &:before {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}
@function black($opacity) {
   @return rgba(0,0,0,$opacity)
}
@function white($opacity) {
   @return rgba(255,255,255,$opacity)
}
/*
*inset and outside shadow
 */
@mixin box-emboss($opacity, $opacity2) {
  box-shadow: white($opacity) 0 1px 0, inset black($opacity2) 0 1px 0;
}
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}
@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}
@mixin line-height($heightValue: 12 ) {
  line-height: $heightValue + px; //fallback for old browsers
  line-height: (0.125 * $heightValue) + rem;
}
@mixin animated-caption($font-color, $bg-color, $bg-opacity, $padding, $transition-speed) {
  display: inline-block;
  position: relative;
  overflow: hidden;

  & img {
    display: block;
    width: 100%;
    height: auto;
  }

  & span.outer {
    display: block;
    width: 100%;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    padding: $padding;
    color: $font-color;
    position: absolute;
    bottom: -100px;
    -webkit-transition: bottom $transition-speed ease;
    -moz-transition: bottom $transition-speed ease;
    -o-transition: bottom $transition-speed ease;
    -ms-transition: bottom $transition-speed ease;
    transition: bottom $transition-speed ease;

    & span.inner {
      margin: 0;
      position: relative;
    }

    &:before {
      content: " ";
      display: block;
      position: absolute;
      z-index: 0;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background: $bg-color;
      filter: alpha(opactiy=($bg-opacity * 100));
      -ms-filter:  "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$bg-opacity * 100})";
      -moz-opacity: $bg-opacity;
      -khtml-opacity: $bg-opacity;
      opacity: $bg-opacity;
    }
  }

  &:hover span.outer {
    bottom: 0;
  }
}
/*
setting font-size
 */
@mixin font-dpr($font-size) {
  font-size: $font-size;

  [data-dpr="2"] & {
    font-size: $font-size * 2;
  }

  [data-dpr="3"] & {
    font-size: $font-size * 3;
  }
}
/*
transform px to rem
 */
@mixin px2rem($property,$px-values,$baseline-px:75px,$support-for-ie:false) {
  //Conver the baseline into rems
  $baseline-rem: $baseline-px / 1rem * 1;
  //Print the first line in pixel values
  @if $support-for-ie {
    #{$property}: $px-values;
  }
  //if there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  }
  @else {
    //Create an empty list that we can dump values into
    $rem-values: ();
    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of($value) != "number" {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}
// image adaptive
//$spriteWidth 雪碧图的宽度px
//$spriteHeight 雪碧图的高度px
//$iconWidth 需要显示icon的宽度px
//$iconHeight 需要显示icon的高度px
//$iconX icon的原始x坐标
//$iconY icon的原始y坐标
//.sprite类的background-size必须设置
//示例html:
//<div class="test-sprites">
//     <ul class="f-cb">
//         <li class="icon1"></li>
//         <li class="icon2"></li>
//         <li class="icon3"></li>
//         <li class="icon4"></li>
//         <li class="icon5"></li>
//         <li class="icon6"></li>
//     </ul>
// </div>
// .test-sprites{
// margin-top: 30px;
//
// ul{
//     padding: 0;
//     margin: 0;
// }
//
// li{
//     width: 0.48rem;
//     height: 0.7rem;
//     overflow: hidden;
//     border: 1px solid #ccc;
//     margin-left: 0.3rem;
//     float: left;
//     background:transparent url('http://nos.netease.com/edu-image/9BC0742AEB1A0B756EFC71B9DF77E452.png') 0 -0.02rem no-repeat;
//     background-size: 10.72rem 4.42rem;
// }
//
// .icon2{
//     width: 0.74rem;
//     height: 0.64rem;
//     background-position: -1.88rem -0.05rem;
// }
@mixin bgPosition($spriteWidth, $spriteHeight, $iconWidth, $iconHeight, $iconX, $iconY) {
  background-position: (($iconX / ($spriteWidth - $iconWidth)) * 100% ($iconY / ($spriteHeight - $iconHeight)) * 100%);
}
//同一张sprite图，横图
@mixin bgPositionSameSprite($iconWidth, $iconHeight, $iconX, $iconY) {
  $spriteWidth: 1072;
  $spriteHeight: 442;
  @include bgPosition($spriteWidth, $spriteHeight, $iconWidth, $iconHeight, $iconX, $iconY);
}
//同一张sprite图、竖图
@mixin bgPositionSameSprite-tow($iconWidth, $iconHeight, $iconX, $iconY) {
  $spriteWidth: 300;
  $spriteHeight: 1000;
  @include bgPosition($spriteWidth, $spriteHeight, $iconWidth, $iconHeight, $iconX, $iconY);
}
//同一张sprite图并且每个icon的大小相同
@mixin bgPositionSameSpriteAndWidth($iconX, $iconY) {
  $spriteWidth: 220;
  $spriteHeight: 220;
  $iconWidth: 61;
  $iconHeight: 61;
  @include bgPosition($spriteWidth, $spriteHeight, $iconWidth, $iconHeight, $iconX, $iconY); //www.zhihu.com/question/48436859/answer/111028001
}
/**
|private mySprite
|使用示例
.icon-1 {
  @include sprite-t($icon-1)
}
*/
@mixin sprite-position-t($sprite) {
  $spritesheet-w: nth($sprite, 7) - nth($sprite, 5);
  $spritesheet-h: nth($sprite, 8) - nth($sprite, 6);
  @if $spritesheet-w != 0px {
    $sprite-offset-x-t: nth($sprite, 1) / $spritesheet-w * 100%;
  }
  @else {
    $sprite-offset-x-t: nth($sprite, 3);
  }
  @if $spritesheet-h != 0px {
    $sprite-offset-y-t: nth($sprite, 2) / $spritesheet-h * 100%;
  }
  @else {
    $sprite-offset-y-t: nth($sprite,4);
  }
  background-position: $sprite-offset-x-t $sprite-offset-y-t;
}
@mixin sprite-size($sprite) {
  background-size: nth($sprite, 7) nth($sprite, 8);
}
@mixin sprite-t($sprite) {
   @include sprite-image($sprite);
  @include sprite-position-t($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
  @include sprite-size($sprite);
}
@mixin mySprites($sprites) {
   @each $sprite in $sprites{
    $sprite-name: nth($sprite, 10);

    .#{$sprite-name} {
      @include sprite-t($sprite);
    }
  }
}
/*** Button mixins ***/
/**
 * Generate button style
 * @param {String} - $name - required
 * @param {String} - $background - required - format accepted: hsla, rgb, #
 * @param {Strong} - $color - optionnal - format accepted: hsla, rgb, #
 * If no $color specify, the 'set-text-color' function is called
 * go check the _function.scss
 */
@mixin generate-button($name, $background, $color: '') {
  .button-#{$name} {
    background: $background;
    @if ($color == '') {
      color: set-text-color($background);
    }
    @else {
      color: $color;
    }

    &:hover {
      background: lighten($background, 10%);
    }
  }
}

.v-flex {}

.h-flex {}
/*
* trangle
 */
@mixin trangle($size, $direction, $color) {
  display: inline-block;
  width: 0;
  height: 0;
  border: solid transparent;
  border-width: $size;
  @if $direction == top {
    border-bottom-color: $color;
  }
  @else if $direction == right {
    border-left-color: $color;
  }
  @else if $direction == bottom {
    border-top-color: $color;
  }
  @else {
    border-right-color: $color;
  }
}

/*
android中在flexible中的1px适配有问题，当在安卓的时候就得写这个样式
用法直接在样式类中使用@include
 */
 @mixin setTopLine($c: #C7C7C7, $pseudo: before) {
   border-top: 1PX solid $c;

   [data-dpr="1"] & {
     border-top: none;
     @media (min-resolution: 2dppx), (min-resolution: 192dpi) {
       position: relative;

       &:#{$pseudo} {
         content: " ";
         position: absolute;
         left: 0;
         top: 0;
         right: 0;
         height: 1PX;
         border-top: 1PX solid $c;
         transform-origin: 0 0;
         transform: scaleY(0.5);
       }
       @media (min-resolution: 3dppx), (min-resolution: 288dpi) {
         &:#{$pseudo} {
           transform: scaleY(0.33);
         }
       }
     }
   }
 }
 @mixin setBottomLine($c: #C7C7C7, $pseudo: before) {
   border-bottom: 1PX solid $c;

   [data-dpr="1"] & {
     border-bottom: none;
     @media (min-resolution: 2dppx), (min-resolution: 192dpi) {
       position: relative;

       &:#{$pseudo} {
         content: " ";
         position: absolute;
         left: 0;
         bottom: 0;
         right: 0;
         height: 1PX;
         border-bottom: 1PX solid $c;
         transform-origin: 0 100%;
         transform: scaleY(0.5);
       }
       @media (min-resolution: 3dppx), (min-resolution: 288dpi) {
         &:#{$pseudo} {
           transform: scaleY(0.33);
         }
       }
     }
   }
 }

 @mixin setLeftLine($c: #C7C7C7, $pseudo: before) {
   border-left: 1PX solid $c;

   [data-dpr="1"] & {
     border-left: none;
     @media (min-resolution: 2dppx), (min-resolution: 192dpi) {
       position: relative;

       &:#{$pseudo} {
         content: " ";
         position: absolute;
         left: 0;
         top: 0;
         bottom: 0;
         width: 1PX;
         border-left: 1PX solid $c;
         transform-origin: 0 0;
         transform: scaleX(0.5);
       }
       @media (min-resolution: 3dppx), (min-resolution: 288dpi) {
         &:#{$pseudo} {
           transform: scaleX(0.33);
         }
       }
     }
   }
 }

 @mixin setRightLine($c: #C7C7C7, $pseudo: before) {
   border-right: 1PX solid $c;

   [data-dpr="1"] & {
     border-right: none;
     @media (min-resolution: 2dppx), (min-resolution: 192dpi) {
       position: relative;

       &:#{$pseudo} {
         content: " ";
         position: absolute;
         right: 0;
         top: 0;
         bottom: 0;
         width: 1PX;
         border-right: 1PX solid $c;
         transform-origin: 100% 0;
         transform: scaleX(0.5);
       }
       @media (min-resolution: 3dppx), (min-resolution: 288dpi) {
         &:#{$pseudo} {
           transform: scaleX(0.33);
         }
       }
     }
   }
 }

 @mixin setLine($c: #C7C7C7, $radius: 0, $pseudo: before) {
   border: 1PX solid $c;
   border-radius: $radius;

   [data-dpr="1"] & {
     @media (min-resolution: 2dppx), (min-resolution: 192dpi) {
       position: relative;
       border: none;
       transform: translateZ(0);

       &:#{$pseudo} {
         content: '';
         position: absolute;
         left: 0;
         top: 0;
         width: 200%;
         height: 200%;
         border: 1PX solid $c;
         border-radius: $radius * 2;
         transform-origin: 0 0;
         transform: scale(0.5);
         box-sizing: border-box;
         pointer-events: none;
         z-index: -1;
       }
     }
   }
 }

 @mixin leftline-remove() {
   border-left: 0;
   &:before {
     display: none !important;
   }
 }

 @mixin rightline-remove() {
   border-right: 0;
   &:before {
     display: none !important;
   }
 }

 @mixin topline-remove() {
   border-top: 0;
   &:before {
     display: none !important;
   }
 }

 @mixin bottomline-remove() {
   border-bottom: 0;
   &:before {
     display: none !important;
   }
 }

@mixin hairline($color: #C7C7C7, $direction: left, $radius: 0, $pseudo: before) {

 @if $direction != 'all' {
   border-#{$direction}: 1PX solid $color;

   [data-dpr="1"] & {
     border-#{$direction}: none;
     @media (min-resolution: 2dppx), (min-resolution: 192dpi) {
       position: relative;

       &:#{$pseudo} {
         content: " ";
         position: absolute;
         border-#{$direction}: 1PX solid $color;
         @if $direction == 'top' {
           left: 0;
           top: 0;
           right: 0;
           height: 1PX;
           transform-origin: 0 0;
           transform: scaleY(0.5);
         } @else if $direction == 'right' {
           right: 0;
           top: 0;
           bottom: 0;
           width: 1PX;
           transform-origin: 100% 0;
           transform: scaleX(0.5);
         } @else if $direction == 'bottom' {
           left: 0;
           bottom: 0;
           right: 0;
           height: 1PX;
           transform-origin: 0 100%;
           transform: scaleY(0.5);
         } @else {
           left: 0;
           top: 0;
           bottom: 0;
           width: 1PX;
           transform-origin: 0 0;
           transform: scaleX(0.5);
         }
       }

       @media (min-resolution: 3dppx), (min-resolution: 288dpi) {
         &:#{$pseudo} {
           @if $direction == 'top' {
             transform: scaleY(0.33);
           } @else if $direction == 'right' {
             transform: scaleX(0.33);
           } @else if $direction == 'bottom' {
               transform: scaleY(0.33);
           } @else {
             transform: scaleX(0.33);
           }
         }
       }
     }
   }
 } @else {
   border: 1PX solid $color;
   border-radius: $radius;

   [data-dpr="1"] & {
     @media (min-resolution: 2dppx), (min-resolution: 192dpi) {
       position: relative;
       border: none;
       transform: translateZ(0);

       &:#{$pseudo} {
         content: '';
         position: absolute;
         left: 0;
         top: 0;
         width: 200%;
         height: 200%;
         border: 1PX solid $color;
         border-radius: $radius * 2;
         transform-origin: 0 0;
         transform: scale(0.5);
         box-sizing: border-box;
         pointer-events: none;
         z-index: -1;
       }
     }
   }
 }
}

@mixin hairline-remove($direction: left) {
 border-#{$direction}: 0;
 &:before {
   display: none !important;
 }
}

/**
 * 下拉框箭头
 */
@mixin setArrow($arrowsize, $borderColor, $borderWidth, $direction: top) {
  @include _setArrow($arrowsize, $borderColor, $borderWidth);

  @if $direction == 'top' {
    transform: matrix(0.71,-0.71,0.71,0.71,0,0);
  } @else if $direction == 'right' {
    transform: matrix(0.71,0.71,-0.71,0.71,0,0);
  } @else if $direction == 'bottom' {
    transform: matrix(-0.71,0.71,-0.71,-0.71,0,0);
  } @else {
    transform: matrix(-0.71,-0.71,0.71,-0.71,0,0);
  }
}

@mixin _setArrow($arrowsize, $borderColor, $borderWidth){
    display: inline-block;
    height: $arrowsize;
    width: $arrowsize;
    border-width: $borderWidth $borderWidth 0 0;
    border-color: $borderColor;
    border-style: solid;
}
